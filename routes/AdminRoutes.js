const express = require('express');
const router = express.Router();
const authenticateToken = require('../middleware/authenticateToken');
const checkAdmin = require('../middleware/checkAdmin');
const User = require('../models/User');
const Blog = require('../models/Blog');
const Comment = require('../models/Comment'); // Thay Tag b·∫±ng Comment

// üìä Route th·ªëng k√™ dashboard





// üìä Route th·ªëng k√™ dashboard
router.get('/stats', authenticateToken, checkAdmin, async (req, res) => {
  try {
    const totalUsers = await User.countDocuments();
    const totalPosts = await Blog.countDocuments();
    const totalComments = await Comment.countDocuments();
    const totalViews = 0;

    // Th·ªëng k√™ s·ªë l∆∞·ª£ng b√†i vi·∫øt theo th√°ng
    const monthlyBlogs = await Blog.aggregate([
      { $group: { _id: { $month: "$createdAt" }, count: { $sum: 1 } } },
      { $sort: { _id: 1 } }
    ]);
    // Th·ªëng k√™ s·ªë l∆∞·ª£ng b√¨nh lu·∫≠n theo th√°ng
    const monthlyComments = await Comment.aggregate([
      { $group: { _id: { $month: "$createdAt" }, count: { $sum: 1 } } },
      { $sort: { _id: 1 } }
    ]);
    // Th·ªëng k√™ s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng theo th√°ng
    const monthlyUsers = await User.aggregate([
      { $group: { _id: { $month: "$createdAt" }, count: { $sum: 1 } } },
      { $sort: { _id: 1 } }
    ]);

    res.json({
      totalUsers,
      totalPosts,
      totalComments,
      totalViews,
      monthlyBlogs,
      monthlyComments,
      monthlyUsers // <== ƒê·∫©y v·ªÅ cho FE d√πng
    });
  } catch (err) {
    console.error('L·ªói th·ªëng k√™:', err);
    res.status(500).json({ message: 'L·ªói server th·ªëng k√™' });
  }
});






// üìÑ L·∫•y danh s√°ch b√†i vi·∫øt theo tr·∫°ng th√°i (pending, rejected,...)
router.get('/posts/:status', authenticateToken, checkAdmin, async (req, res) => {
  const status = req.params.status;
  try {
    // N·∫øu status l√† "approved", tr·∫£ v·ªÅ c·∫£ approved v√† draft
    let query = {};
    if (status === 'approved') {
      query.status = { $in: ['approved', 'draft'] };
    } else {
      query.status = status;
    }
    const posts = await Blog.find(query)
      .populate('userId', 'name')
      .sort({ updatedAt: -1 });
    res.json(posts);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói khi l·∫•y b√†i vi·∫øt' });
  }
});

// ‚úÖ Duy·ªát/b·ªè ·∫©n b√†i vi·∫øt (status: approved)
router.put('/posts/:id/approve', authenticateToken, checkAdmin, async (req, res) => {
  try {
    const post = await Blog.findByIdAndUpdate(req.params.id, { status: 'approved' }, { new: true });
    res.json(post);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói duy·ªát b√†i vi·∫øt' });
  }
});

// ‚ùå T·ª´ ch·ªëi b√†i vi·∫øt (status: rejected)
router.put('/posts/:id/reject', authenticateToken, checkAdmin, async (req, res) => {
  try {
    const post = await Blog.findByIdAndUpdate(req.params.id, { status: 'rejected' }, { new: true });
    res.json(post);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói t·ª´ ch·ªëi b√†i vi·∫øt' });
  }
});

// üóëÔ∏è Xo√° b√†i vi·∫øt
router.delete('/posts/:id', authenticateToken, checkAdmin, async (req, res) => {
  try {
    await Blog.findByIdAndDelete(req.params.id);
    res.json({ message: 'ƒê√£ xo√° b√†i vi·∫øt' });
  } catch (err) {
    res.status(500).json({ message: 'L·ªói xo√° b√†i vi·∫øt' });
  }
});

// ·∫®n b√†i vi·∫øt (status: draft)
router.put('/posts/:id/draft', authenticateToken, checkAdmin, async (req, res) => {
  try {
    const post = await Blog.findByIdAndUpdate(req.params.id, { status: 'draft' }, { new: true });
    res.json(post);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói ·∫©n b√†i vi·∫øt' });
  }
});

module.exports = router;
